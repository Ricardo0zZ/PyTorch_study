{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "本文介绍如何利用在多个期货品种上进行批量回测，并分析结果。回测部分基于开源回测框架`rqalpha`，技术指标计算基于开源库`funcat`。"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "以双均线策略为例进行介绍。策略基本思路如下：\n",
    "- 如果当前未持仓：\n",
    "    - 若5日均线上穿10日均线：开仓做多\n",
    "    - 若5日均线下穿10日均线：开仓做空\n",
    "- 如果当前持多仓：\n",
    "    - 若5日均线下穿10日均线：平仓\n",
    "- 如果当前持空仓：\n",
    "    - 若5日均线上穿10日均线：平仓"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# 基本思路\n",
    "\n",
    "对于单品种的技术指标回测来说，可以分离出两组相对独立的逻辑：**信号计算**和**回测**。"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 信号计算\n",
    "\n",
    "这部分主要解决信号如何生成的问题。信号的计算主要基于`funcat`实现。自定义的信号，可通过组合`funcat`提供的基本指标实现。本文展示了移动平均线和金叉的实现。在函数`GOLDEN_CROSS`中，`CLOSE`是收盘价的表达式，`MA(CLOSE, 5)`表示对收盘价求步长为5的移动平均，`CROSS(ma_5, ma_10)`表示求`ma_5`是否由下而上穿过`ma_10`，即金叉。如果要实现死叉，只需将两者交换位置：`CROSS(ma_10, ma_5)`。\n",
    "\n",
    "到这里为止，`CLOSE`、`MA`和`CROSS`都是**表达式**，并不是实际的值，也还不需要指定具体的标的。具体数据导入和数值计算会在回测运行时实现。这种lazy eval的方式，优点是可以在得到完整表达式之后，再从整体上进行优化，减少IO和重复计算。\n",
    "\n",
    "更多`funcat`的用法参考[github项目主页](https://github.com/cedricporter/funcat/blob/master/notebooks/funcat-tutorial.ipynb)\n",
    "\n",
    "更多预置指标介绍参考[riecequant文档](https://www.ricequant.com/api/python/chn#technical-analysis-system-tools)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "from collections import OrderedDict\n",
    "import pandas as pd\n",
    "\n",
    "import rqalpha as rqa\n",
    "from rqalpha.mod.rqalpha_mod_sys_analyser.plot import plot_result\n",
    "\n",
    "from funcat import CLOSE\n",
    "from funcat import MA, CROSS\n",
    "\n",
    "%matplotlib inline"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [],
   "source": [
    "def make_golden_cross(a, b):\n",
    "    \n",
    "    def golden_cross():\n",
    "        ma_5 = MA(CLOSE, a)\n",
    "        ma_10 = MA(CLOSE, b)\n",
    "        return CROSS(ma_5, ma_10)\n",
    "    return golden_cross\n",
    "\n",
    "gc = make_golden_cross(1, 7)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [],
   "source": [
    "def GOLDEN_CROSS():\n",
    "    \n",
    "    ma_5 = MA(CLOSE, 5)\n",
    "    ma_10 = MA(CLOSE, 10)\n",
    "    return CROSS(ma_5, ma_10)\n",
    "    \n",
    "    \n",
    "def DEAD_CROSS():\n",
    "    ma_5 = MA(CLOSE, 5)\n",
    "    ma_10 = MA(CLOSE, 10)\n",
    "    return CROSS(ma_10, ma_5)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 回测\n",
    "\n",
    "回测部分主要解决两个问题：将信号计算的逻辑引入回测系统；将信号转化为持仓。前者可通过`rqalpha`的API`reg_indicator`实现，基本不需要修改。后者由交易辑决定，不同的交易逻辑、不同的下单方式，需要不同的实现。"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "`rqalpha`使用了`rqalpha_mod_indicator`来实现`funcat`的API规范。在配置变量`config`中可以看到\n",
    "\n",
    "```Python\n",
    "'mod': {\n",
    "    ......\n",
    "    'sys_funcat': {'enabled': True},\n",
    "    'indicator': {'enabled': True},\n",
    "}\n",
    "```\n",
    "\n",
    "这表示`sys_funcat`和`indicator`这两个module被激活了。`rqalpha`解析到这两条配置的时候，会加载这两个mod里面定义的API，让`init`和`handle_bar`等函数能够调用。\n",
    "\n",
    "\n",
    "在函数`init`中，`reg_indicator('long_signal', GOLDEN_CROSS, '1d', win_size=20)`表示将前面定义的`GOLDEN_CROSS`注册到内部的预计算组件，指标名称为`long_signal`。\n",
    "\n",
    "注册完成之后，指标可以在`handle_bar`中通过`long_signal = get_indicator(context.symbol, 'long_signal')`获取。返回的`long_signal`是一个python原生的boolean类型变量，被后面的交易逻辑使用。\n",
    "\n",
    "另外，前面提到`funcat`是lazy eval的，定义表达式的时候无需指定标的。到这里可以看到，标的是在获取信号的时候才的，`funcat`内部计算组件在这时才会调取该标的的数据，动态计算指标。而`rqalpha`的`get_indicator`API负责两件事：第一，调用`funcat`API进行动态，并缓存结算结果，减少重复计算；第二，与回测时间对齐，确保不引用未来数据。"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [],
   "source": [
    "def init(context):\n",
    "    # reg_indicator 是rqalpha的API, 在load mod阶段才会被定义, 不需提前import\n",
    "    reg_indicator('long_signal', GOLDEN_CROSS, '1d', win_size=20)\n",
    "    reg_indicator('short_signal', DEAD_CROSS, '1d', win_size=20)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "`handle_bar`的前两行解决了信号的获取问题，后面的`if-else`block负责实现具体的交易逻辑，结构与前文提到的策略逻辑完全一致，无需赘述。\n",
    "\n",
    "此外，不同的交易逻辑会根据信号进行不同的下单操作。比如，当前持多仓，指标出现了做空信号。这时既可以平仓退出，也可以平多并反手做空。本例展示了出现反向信号就平仓退出的情形。读者可以尝试实现反手开仓的情形。"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 杠杆问题\n",
    "\n",
    "在对比不同期货品种时需要注意杠杆的问题。不同品种合约要求的保证金比例是不同的，也就是不同合约允许放大的杠杆倍数是不同的。比如白糖(SR1909)的最低保证金比率为0.05，也就是最高可以放`1 / 0.05 = 20`倍杠杆。又如沪深300指数期货(IF1909)的最低保证金比率为0.1，即最高杠杆倍数为`1 / 0.1 = 10`倍。这里的杠杆倍数实质上是合约名义价值相对于占用保证金的倍数，在这里我们称为“合约杠杆”。而在策略层面上，我们更关注的其实是合约名义价值相对于总资金的倍数，它反映了整个策略所加的杠杆，在这里我们称为“总杠杆(total leverage)”。一方面，总杠杆是可以根据风险偏好进行调节的。另一方面，不同合约由于合约杠杆不同，回测所得的风险收益是不可比的，但是控制了总杠杆之后是可比的。\n",
    "\n",
    "具体来说，控制总杠杆就是根据不同合约的合约杠杆，调整持仓手数，合约杠杆高的，持仓减少，从而使得持仓合约的总价值相对于总资金的比例恒定。计算手数的逻辑放在`_compute_target_lots`中实现。"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [],
   "source": [
    "def handle_bar(context, bar_dict):\n",
    "    long_signal = get_indicator(context.symbol, 'long_signal')\n",
    "    short_signal = get_indicator(context.symbol, 'short_signal')\n",
    "    \n",
    "    # 若当前未持仓, 有开仓信号就开仓\n",
    "    positions = rqa.api.get_positions()\n",
    "    if not positions:\n",
    "        if long_signal:\n",
    "            target_lots = _compute_target_lots(context, bar_dict)\n",
    "            order = rqa.api.buy_open(context.symbol, target_lots)\n",
    "        \n",
    "        elif short_signal:\n",
    "            target_lots = _compute_target_lots(context, bar_dict)\n",
    "            order = rqa.api.sell_open(context.symbol, target_lots)\n",
    "            \n",
    "    # 若已经持仓, 有平仓信号就平仓\n",
    "    else:\n",
    "        position = positions[0]\n",
    "        if position.direction == POSITION_DIRECTION.LONG:\n",
    "            if short_signal:\n",
    "                order = rqa.api.sell_close(position.order_book_id, position.quantity)\n",
    "\n",
    "        elif position.direction == POSITION_DIRECTION.SHORT:\n",
    "            if long_signal:\n",
    "                order = rqa.api.buy_close(position.order_book_id, position.quantity)\n",
    "\n",
    "\n",
    "def _compute_target_lots(context, bar_dict):\n",
    "    # 目标手数 = 目标名义价值 / 一手的名义价值\n",
    "    # 其中:\n",
    "    #  目标名义价值 = 总资金 * 总杠杆\n",
    "    #  一手合约的名义价值 = 价格 * 合约乘数\n",
    "    \n",
    "    total_capital = context.future_account.total_value\n",
    "    total_leverage = context.total_leverage\n",
    "    target_notional = total_capital * total_leverage\n",
    "    \n",
    "    multiplier = rqa.api.instruments(context.symbol).contract_multiplier\n",
    "    price = bar_dict[context.symbol].open\n",
    "    notional_for_one_lot = price * multiplier\n",
    "    \n",
    "    return int(target_notional / notional_for_one_lot) # int(x) 对 x 直接向下取整"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "实现了信号计算和回测两部分核心逻辑后，接下来只需写一些glue code调用`rqalpha`进行批量测试。这部分的逻辑相对固定，可以复用。\n",
    "\n",
    "函数`make_config`暴露了几个主要需要配置的参数，生成一个完整的回测配置，供`rqalpha`使用。这里重点介绍`extra`下面的`context_var`字段。它可以将用户预定义好的变量在初始化时赋值给`context`对象。这种机制可以让用户将所有要配置的参数集中到`config`，改动配置不会影响到让`init`和`handle_bar`的定义。rqalpha文档中有另一个使用`context_var`进行[参数调优的例子](https://rqalpha.readthedocs.io/zh_CN/latest/intro/optimizing_parameters.html?highlight=context_var)。\n",
    "\n",
    "\n",
    "如用户需要更细致的配置，也可以自己构造配置。更多的配置参数见[rqalpha文档](https://rqalpha.readthedocs.io/zh_CN/latest/intro/run_algorithm.html#id6)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [],
   "source": [
    "def make_config(symbol, start_date, end_date, total_leverage=1):\n",
    "    config = {\n",
    "        'base': {\n",
    "            'start_date': start_date,\n",
    "            'end_date': end_date,\n",
    "            'frequency': '1d',\n",
    "\n",
    "            'accounts': {'future': 1e8}, # 期货初始资金\n",
    "        },\n",
    "\n",
    "        'mod': {\n",
    "            'sys_analyser': {'plot': False}, # 批量回测不需要画图\n",
    "            \n",
    "            'sys_simulation': {\n",
    "                # 佣金倍率\n",
    "                'commission_multiplier': 0,\n",
    "\n",
    "                # 撮合时无视涨跌停\n",
    "                'price_limit': False,\n",
    "\n",
    "                # 撮合时无视市场容量\n",
    "                'volume_limit': False,\n",
    "\n",
    "                # 滑点值\n",
    "                'slippage': 0,\n",
    "            },\n",
    "            \n",
    "            'sys_funcat': {'enabled': True},\n",
    "            \n",
    "            'indicator': {'enabled': True},\n",
    "        },\n",
    "\n",
    "        'extra': {\n",
    "            'context_vars': {\n",
    "                'symbol': symbol,\n",
    "                'total_leverage': total_leverage,\n",
    "            }, \n",
    "            \n",
    "            'log_level': 'ERROR',\n",
    "        },\n",
    "    }\n",
    "    \n",
    "    return config"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "`run_backtest`是这个框架主要的接口。输入控制回测逻辑的两个主要函数，以及品种、日期区间等参数，进行批量回测，将每次的回测结果存入一个以品种代码为key的字典中。\n",
    "\n",
    "本文直接用连续合约为例进行测试。[rqdata文档](https://www.ricequant.com/api/python/chn#datasources-stock)有关于连续合约的介绍。"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [],
   "source": [
    "def run_backtest(init, handle_bar, symbols, start_date='2014-01-01', end_date='2019-05-31', total_leverage=1):\n",
    "    results = OrderedDict()\n",
    "    for sym in symbols:\n",
    "        config = make_config(sym, start_date, end_date, total_leverage)\n",
    "        res = rqa.run_func(init=init, handle_bar=handle_bar, \n",
    "                           config=config)\n",
    "        results[sym] = res['sys_analyser']\n",
    "    return results"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/usr/local/lib/python3.6/site-packages/rqalpha/utils/config.py:40: YAMLLoadWarning: calling yaml.load() without Loader=... is deprecated, as the default Loader is unsafe. Please read https://msg.pyyaml.org/load for full details.\n",
      "  return yaml.load(f)\n",
      "/usr/local/lib/python3.6/site-packages/rqdatac/client.py:166: UserWarning: rqdatac is already inited. Settings will be changed.\n",
      "  warnings.warn(\"rqdatac is already inited. Settings will be changed.\", stacklevel=0)\n"
     ]
    }
   ],
   "source": [
    "results = run_backtest(init, handle_bar, ['RB88', 'IF88', 'CU88'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# 回测结果分析"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "单次的回测结果包含'summary', 'trades', 'portfolio', 'future_account', 'future_positions'五个字段，逐一查看每个字段中的内容："
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "dict_keys(['summary', 'trades', 'portfolio', 'future_account', 'future_positions'])"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "results['IF88'].keys()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## summary\n",
    "\n",
    "`summary`是一个字典，概括了这次回测的基本信息和绩效指标。"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'strategy_name': 'strategy',\n",
       " 'start_date': '2014-01-02',\n",
       " 'end_date': '2019-05-31',\n",
       " 'strategy_file': 'strategy.py',\n",
       " 'run_type': 'BACKTEST',\n",
       " 'FUTURE': 100000000.0,\n",
       " 'alpha': nan,\n",
       " 'beta': nan,\n",
       " 'sharpe': 0.204,\n",
       " 'information_ratio': 0.424,\n",
       " 'downside_risk': 0.14,\n",
       " 'tracking_error': 0.205,\n",
       " 'sortino': 0.621,\n",
       " 'volatility': 0.205,\n",
       " 'max_drawdown': 0.254,\n",
       " 'total_value': 141201991.696,\n",
       " 'cash': 120397831.696,\n",
       " 'total_returns': 0.412,\n",
       " 'annualized_returns': 0.068,\n",
       " 'unit_net_value': 1.412,\n",
       " 'units': 100000000.0}"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "results['IF88']['summary']"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## trades\n",
    "\n",
    "`trades`是一个dataframe，每一行为一条交易记录"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>commission</th>\n",
       "      <th>exec_id</th>\n",
       "      <th>last_price</th>\n",
       "      <th>last_quantity</th>\n",
       "      <th>order_book_id</th>\n",
       "      <th>order_id</th>\n",
       "      <th>position_effect</th>\n",
       "      <th>side</th>\n",
       "      <th>symbol</th>\n",
       "      <th>tax</th>\n",
       "      <th>trading_datetime</th>\n",
       "      <th>transaction_cost</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>datetime</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2014-01-02 15:00:00</th>\n",
       "      <td>2284.69764</td>\n",
       "      <td>15641235931319</td>\n",
       "      <td>2331.8</td>\n",
       "      <td>142</td>\n",
       "      <td>IF88</td>\n",
       "      <td>15641234111319</td>\n",
       "      <td>OPEN</td>\n",
       "      <td>BUY</td>\n",
       "      <td>沪深主力连续</td>\n",
       "      <td>0</td>\n",
       "      <td>2014-01-02 15:00:00</td>\n",
       "      <td>2284.69764</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2014-01-03 15:00:00</th>\n",
       "      <td>2255.89152</td>\n",
       "      <td>15641235931320</td>\n",
       "      <td>2302.4</td>\n",
       "      <td>142</td>\n",
       "      <td>IF88</td>\n",
       "      <td>15641234111320</td>\n",
       "      <td>CLOSE</td>\n",
       "      <td>SELL</td>\n",
       "      <td>沪深主力连续</td>\n",
       "      <td>0</td>\n",
       "      <td>2014-01-03 15:00:00</td>\n",
       "      <td>2255.89152</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2014-01-06 15:00:00</th>\n",
       "      <td>2210.99736</td>\n",
       "      <td>15641235931321</td>\n",
       "      <td>2240.8</td>\n",
       "      <td>143</td>\n",
       "      <td>IF88</td>\n",
       "      <td>15641234111321</td>\n",
       "      <td>OPEN</td>\n",
       "      <td>BUY</td>\n",
       "      <td>沪深主力连续</td>\n",
       "      <td>0</td>\n",
       "      <td>2014-01-06 15:00:00</td>\n",
       "      <td>2210.99736</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2014-01-07 15:00:00</th>\n",
       "      <td>2208.62928</td>\n",
       "      <td>15641235931322</td>\n",
       "      <td>2238.4</td>\n",
       "      <td>143</td>\n",
       "      <td>IF88</td>\n",
       "      <td>15641234111322</td>\n",
       "      <td>CLOSE</td>\n",
       "      <td>SELL</td>\n",
       "      <td>沪深主力连续</td>\n",
       "      <td>0</td>\n",
       "      <td>2014-01-07 15:00:00</td>\n",
       "      <td>2208.62928</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2014-01-08 15:00:00</th>\n",
       "      <td>2257.78488</td>\n",
       "      <td>15641235931323</td>\n",
       "      <td>2241.2</td>\n",
       "      <td>146</td>\n",
       "      <td>IF88</td>\n",
       "      <td>15641234111323</td>\n",
       "      <td>OPEN</td>\n",
       "      <td>BUY</td>\n",
       "      <td>沪深主力连续</td>\n",
       "      <td>0</td>\n",
       "      <td>2014-01-08 15:00:00</td>\n",
       "      <td>2257.78488</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                     commission         exec_id  last_price  last_quantity  \\\n",
       "datetime                                                                     \n",
       "2014-01-02 15:00:00  2284.69764  15641235931319      2331.8            142   \n",
       "2014-01-03 15:00:00  2255.89152  15641235931320      2302.4            142   \n",
       "2014-01-06 15:00:00  2210.99736  15641235931321      2240.8            143   \n",
       "2014-01-07 15:00:00  2208.62928  15641235931322      2238.4            143   \n",
       "2014-01-08 15:00:00  2257.78488  15641235931323      2241.2            146   \n",
       "\n",
       "                    order_book_id        order_id position_effect  side  \\\n",
       "datetime                                                                  \n",
       "2014-01-02 15:00:00          IF88  15641234111319            OPEN   BUY   \n",
       "2014-01-03 15:00:00          IF88  15641234111320           CLOSE  SELL   \n",
       "2014-01-06 15:00:00          IF88  15641234111321            OPEN   BUY   \n",
       "2014-01-07 15:00:00          IF88  15641234111322           CLOSE  SELL   \n",
       "2014-01-08 15:00:00          IF88  15641234111323            OPEN   BUY   \n",
       "\n",
       "                     symbol  tax     trading_datetime  transaction_cost  \n",
       "datetime                                                                 \n",
       "2014-01-02 15:00:00  沪深主力连续    0  2014-01-02 15:00:00        2284.69764  \n",
       "2014-01-03 15:00:00  沪深主力连续    0  2014-01-03 15:00:00        2255.89152  \n",
       "2014-01-06 15:00:00  沪深主力连续    0  2014-01-06 15:00:00        2210.99736  \n",
       "2014-01-07 15:00:00  沪深主力连续    0  2014-01-07 15:00:00        2208.62928  \n",
       "2014-01-08 15:00:00  沪深主力连续    0  2014-01-08 15:00:00        2257.78488  "
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "results['IF88']['trades'].head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## future_poisitions\n",
    "\n",
    "`future_positions`是一个dataframe，每一行为某一期某个品种的持仓情况。"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>buy_avg_open_price</th>\n",
       "      <th>buy_margin</th>\n",
       "      <th>buy_pnl</th>\n",
       "      <th>buy_quantity</th>\n",
       "      <th>contract_multiplier</th>\n",
       "      <th>last_price</th>\n",
       "      <th>margin</th>\n",
       "      <th>margin_rate</th>\n",
       "      <th>order_book_id</th>\n",
       "      <th>sell_avg_open_price</th>\n",
       "      <th>sell_margin</th>\n",
       "      <th>sell_pnl</th>\n",
       "      <th>sell_quantity</th>\n",
       "      <th>symbol</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>date</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2014-01-02</th>\n",
       "      <td>2331.8</td>\n",
       "      <td>14900202.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>142.0</td>\n",
       "      <td>300.0</td>\n",
       "      <td>2331.8</td>\n",
       "      <td>14900202.0</td>\n",
       "      <td>0.15</td>\n",
       "      <td>IF88</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>-0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>沪深主力连续</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2014-01-03</th>\n",
       "      <td>2331.8</td>\n",
       "      <td>0.0</td>\n",
       "      <td>-0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>300.0</td>\n",
       "      <td>2302.4</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.15</td>\n",
       "      <td>IF88</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>-0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>沪深主力连续</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2014-01-06</th>\n",
       "      <td>2240.8</td>\n",
       "      <td>14419548.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>143.0</td>\n",
       "      <td>300.0</td>\n",
       "      <td>2240.8</td>\n",
       "      <td>14419548.0</td>\n",
       "      <td>0.15</td>\n",
       "      <td>IF88</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>-0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>沪深主力连续</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2014-01-07</th>\n",
       "      <td>2240.8</td>\n",
       "      <td>0.0</td>\n",
       "      <td>-0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>300.0</td>\n",
       "      <td>2238.4</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.15</td>\n",
       "      <td>IF88</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>-0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>沪深主力连续</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2014-01-08</th>\n",
       "      <td>2241.2</td>\n",
       "      <td>14724684.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>146.0</td>\n",
       "      <td>300.0</td>\n",
       "      <td>2241.2</td>\n",
       "      <td>14724684.0</td>\n",
       "      <td>0.15</td>\n",
       "      <td>IF88</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>-0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>沪深主力连续</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "            buy_avg_open_price  buy_margin  buy_pnl  buy_quantity  \\\n",
       "date                                                                \n",
       "2014-01-02              2331.8  14900202.0      0.0         142.0   \n",
       "2014-01-03              2331.8         0.0     -0.0           0.0   \n",
       "2014-01-06              2240.8  14419548.0      0.0         143.0   \n",
       "2014-01-07              2240.8         0.0     -0.0           0.0   \n",
       "2014-01-08              2241.2  14724684.0      0.0         146.0   \n",
       "\n",
       "            contract_multiplier  last_price      margin  margin_rate  \\\n",
       "date                                                                   \n",
       "2014-01-02                300.0      2331.8  14900202.0         0.15   \n",
       "2014-01-03                300.0      2302.4         0.0         0.15   \n",
       "2014-01-06                300.0      2240.8  14419548.0         0.15   \n",
       "2014-01-07                300.0      2238.4         0.0         0.15   \n",
       "2014-01-08                300.0      2241.2  14724684.0         0.15   \n",
       "\n",
       "           order_book_id  sell_avg_open_price  sell_margin  sell_pnl  \\\n",
       "date                                                                   \n",
       "2014-01-02          IF88                  0.0          0.0      -0.0   \n",
       "2014-01-03          IF88                  0.0          0.0      -0.0   \n",
       "2014-01-06          IF88                  0.0          0.0      -0.0   \n",
       "2014-01-07          IF88                  0.0          0.0      -0.0   \n",
       "2014-01-08          IF88                  0.0          0.0      -0.0   \n",
       "\n",
       "            sell_quantity  symbol  \n",
       "date                               \n",
       "2014-01-02            0.0  沪深主力连续  \n",
       "2014-01-03            0.0  沪深主力连续  \n",
       "2014-01-06            0.0  沪深主力连续  \n",
       "2014-01-07            0.0  沪深主力连续  \n",
       "2014-01-08            0.0  沪深主力连续  "
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "results['IF88']['future_positions'].head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## future_account\n",
    "\n",
    "`future_account`是一个dataframe，每一行为期货账户在某一天的情况。"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>cash</th>\n",
       "      <th>daily_pnl</th>\n",
       "      <th>holding_pnl</th>\n",
       "      <th>margin</th>\n",
       "      <th>market_value</th>\n",
       "      <th>realized_pnl</th>\n",
       "      <th>total_value</th>\n",
       "      <th>transaction_cost</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>date</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2014-01-02</th>\n",
       "      <td>8.509751e+07</td>\n",
       "      <td>-2284.698</td>\n",
       "      <td>0.0</td>\n",
       "      <td>14900202.0</td>\n",
       "      <td>99334680.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>9.999772e+07</td>\n",
       "      <td>2284.698</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2014-01-03</th>\n",
       "      <td>9.874302e+07</td>\n",
       "      <td>-1365455.892</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>-1363200.0</td>\n",
       "      <td>9.874302e+07</td>\n",
       "      <td>2255.892</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2014-01-06</th>\n",
       "      <td>8.432126e+07</td>\n",
       "      <td>-2210.997</td>\n",
       "      <td>0.0</td>\n",
       "      <td>14419548.0</td>\n",
       "      <td>96130320.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>9.874081e+07</td>\n",
       "      <td>2210.997</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2014-01-07</th>\n",
       "      <td>9.863564e+07</td>\n",
       "      <td>-79428.629</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>-77220.0</td>\n",
       "      <td>9.863564e+07</td>\n",
       "      <td>2208.629</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2014-01-08</th>\n",
       "      <td>8.390870e+07</td>\n",
       "      <td>-2257.785</td>\n",
       "      <td>0.0</td>\n",
       "      <td>14724684.0</td>\n",
       "      <td>98164560.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>9.863338e+07</td>\n",
       "      <td>2257.785</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                    cash    daily_pnl  holding_pnl      margin  market_value  \\\n",
       "date                                                                           \n",
       "2014-01-02  8.509751e+07    -2284.698          0.0  14900202.0    99334680.0   \n",
       "2014-01-03  9.874302e+07 -1365455.892          0.0         0.0           0.0   \n",
       "2014-01-06  8.432126e+07    -2210.997          0.0  14419548.0    96130320.0   \n",
       "2014-01-07  9.863564e+07   -79428.629          0.0         0.0           0.0   \n",
       "2014-01-08  8.390870e+07    -2257.785          0.0  14724684.0    98164560.0   \n",
       "\n",
       "            realized_pnl   total_value  transaction_cost  \n",
       "date                                                      \n",
       "2014-01-02           0.0  9.999772e+07          2284.698  \n",
       "2014-01-03    -1363200.0  9.874302e+07          2255.892  \n",
       "2014-01-06           0.0  9.874081e+07          2210.997  \n",
       "2014-01-07      -77220.0  9.863564e+07          2208.629  \n",
       "2014-01-08           0.0  9.863338e+07          2257.785  "
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "results['IF88']['future_account'].head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## portfolio\n",
    "\n",
    "`portfolio`是一个dataframe，每一行为整个策略账户在某一天的情况。在`rqalpha`中，`portfolio`是比`account`更高层的概念。`account`对应特定的资产类别。一个`portfolio`可以包含多种资产，所以包含多个`account`。在本例中，只有期货账户，所以两者是重合的。"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>cash</th>\n",
       "      <th>market_value</th>\n",
       "      <th>static_unit_net_value</th>\n",
       "      <th>total_value</th>\n",
       "      <th>unit_net_value</th>\n",
       "      <th>units</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>date</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2014-01-02</th>\n",
       "      <td>8.509751e+07</td>\n",
       "      <td>99334680.0</td>\n",
       "      <td>1.000</td>\n",
       "      <td>9.999772e+07</td>\n",
       "      <td>0.999977</td>\n",
       "      <td>100000000.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2014-01-03</th>\n",
       "      <td>9.874302e+07</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.000</td>\n",
       "      <td>9.874302e+07</td>\n",
       "      <td>0.987430</td>\n",
       "      <td>100000000.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2014-01-06</th>\n",
       "      <td>8.432126e+07</td>\n",
       "      <td>96130320.0</td>\n",
       "      <td>0.987</td>\n",
       "      <td>9.874081e+07</td>\n",
       "      <td>0.987408</td>\n",
       "      <td>100000000.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2014-01-07</th>\n",
       "      <td>9.863564e+07</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.987</td>\n",
       "      <td>9.863564e+07</td>\n",
       "      <td>0.986356</td>\n",
       "      <td>100000000.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2014-01-08</th>\n",
       "      <td>8.390870e+07</td>\n",
       "      <td>98164560.0</td>\n",
       "      <td>0.986</td>\n",
       "      <td>9.863338e+07</td>\n",
       "      <td>0.986334</td>\n",
       "      <td>100000000.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                    cash  market_value  static_unit_net_value   total_value  \\\n",
       "date                                                                          \n",
       "2014-01-02  8.509751e+07    99334680.0                  1.000  9.999772e+07   \n",
       "2014-01-03  9.874302e+07           0.0                  1.000  9.874302e+07   \n",
       "2014-01-06  8.432126e+07    96130320.0                  0.987  9.874081e+07   \n",
       "2014-01-07  9.863564e+07           0.0                  0.987  9.863564e+07   \n",
       "2014-01-08  8.390870e+07    98164560.0                  0.986  9.863338e+07   \n",
       "\n",
       "            unit_net_value        units  \n",
       "date                                     \n",
       "2014-01-02        0.999977  100000000.0  \n",
       "2014-01-03        0.987430  100000000.0  \n",
       "2014-01-06        0.987408  100000000.0  \n",
       "2014-01-07        0.986356  100000000.0  \n",
       "2014-01-08        0.986334  100000000.0  "
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "results['IF88']['portfolio'].head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 净值图\n",
    "\n",
    "`rqalpha.mod.rqalpha_mod_sys_analyser.plot`下的`plot_result`是`rqalpha`的主要作图API"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1296x432 with 3 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plot_result(results['IF88'])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 多品种概括\n",
    "\n",
    "简单定义一组函数将结果汇总"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [],
   "source": [
    "def extract_indicator(indicator, result_dict):\n",
    "    return result_dict['summary'][indicator]\n",
    "\n",
    "\n",
    "def summarize(results):\n",
    "    indicators = ['annualized_returns', 'volatility', 'max_drawdown',\n",
    "                  'sharpe', 'sortino']\n",
    "    records = {}\n",
    "    for ticker, result in results.items():\n",
    "        records[ticker] = {ind: extract_indicator(ind, result) for ind in indicators}\n",
    "    df = pd.DataFrame(records).T # use indicator as column, ticker as index\n",
    "    return df[indicators] # reorder columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>annualized_returns</th>\n",
       "      <th>volatility</th>\n",
       "      <th>max_drawdown</th>\n",
       "      <th>sharpe</th>\n",
       "      <th>sortino</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>RB88</th>\n",
       "      <td>0.026</td>\n",
       "      <td>0.195</td>\n",
       "      <td>0.317</td>\n",
       "      <td>-0.002</td>\n",
       "      <td>0.338</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>IF88</th>\n",
       "      <td>0.068</td>\n",
       "      <td>0.205</td>\n",
       "      <td>0.254</td>\n",
       "      <td>0.204</td>\n",
       "      <td>0.621</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>CU88</th>\n",
       "      <td>0.010</td>\n",
       "      <td>0.123</td>\n",
       "      <td>0.218</td>\n",
       "      <td>-0.221</td>\n",
       "      <td>0.208</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "      annualized_returns  volatility  max_drawdown  sharpe  sortino\n",
       "RB88               0.026       0.195         0.317  -0.002    0.338\n",
       "IF88               0.068       0.205         0.254   0.204    0.621\n",
       "CU88               0.010       0.123         0.218  -0.221    0.208"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "summarize(results)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 参数调优\n",
    "给定若干组参数，比较其对应回测结果。\n",
    "\n",
    "其中，技术指标的计算逻辑，是通过`reg_indicator`注册到`funcat`内部的计算组件的，指标名称分别为`long signal`和`short signal`。而`reg_indicator`的API要求所注册的函数不带参数。所以才要用闭包的形式来构造既能随着参数改变而改变，又符合`reg_indicator` API约定的函数`make_long_signal`函数和`make_short_signal`,函数`init`的处理思路类似，无需赘述。"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [],
   "source": [
    "def make_long_signal(short, long):\n",
    "    \n",
    "    def golden_cross():\n",
    "        ma_short = MA(CLOSE, short)\n",
    "        ma_long = MA(CLOSE, long)\n",
    "        return CROSS(ma_short, ma_long) \n",
    "    \n",
    "    return golden_cross\n",
    "\n",
    "def make_short_signal(short, long):\n",
    "    \n",
    "    def dead_cross():\n",
    "        ma_short = MA(CLOSE, short)\n",
    "        ma_long = MA(CLOSE, long)\n",
    "        return CROSS(ma_long, ma_short)   \n",
    "    \n",
    "    return dead_cross\n",
    "\n",
    "def make_init(long_signal, short_signal):\n",
    "    def init(context):\n",
    "        reg_indicator('long_signal', long_signal)\n",
    "        reg_indicator('short_signal', short_signal)\n",
    "    return init\n",
    "                \n",
    "\n",
    "def run_backtest(init, handle_bar, symbols, start_date= '2014-01-01', end_date = '2019-05-31', total_leverage = 1):\n",
    "    results = OrderedDict()\n",
    "    for sym in symbols:\n",
    "        config = make_config(sym, start_date , end_date , total_leverage)\n",
    "        res = rqa.run_func(init = init , handle_bar = handle_bar , config = config)\n",
    "        results[sym] = res['sys_analyser']\n",
    "        return results\n",
    "    from rqalpha import run\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [],
   "source": [
    "params = [(1, 2), (1, 5), (5, 10), (5, 20), (5, 30), (10, 20), (10, 30), (15, 20), (15, 30)]\n",
    "results = OrderedDict()\n",
    "for param in params:\n",
    "    short, long = param\n",
    "    long_signal = make_long_signal(short, long)\n",
    "    short_signal = make_short_signal(short, long)\n",
    "    \n",
    "    init = make_init(long_signal, short_signal)\n",
    "    res = run_backtest(init, handle_bar, ['RB88'])['RB88']\n",
    "    results[param] = res"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
